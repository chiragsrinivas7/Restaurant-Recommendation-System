# -*- coding: utf-8 -*-
"""ZomatoDAAssgn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SJuiYm7ZSqiWE8y8Zh4_z9419fXmTkBH

Importing required lbraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#reading the dataset
data= pd.read_csv('zomato.csv')
dataset = data.copy()

# getting insights of the data
data.head()
data.info()

# deleting unnecessary data
del data['url']
del data['phone']
del data['address']
# del data['listed_in(city)']

data.isnull().sum()

# Replace Bogus terms with NaN values
data['rate'] = data['rate'].replace('NEW',np.NaN)
data['rate'] = data['rate'].replace('-',np.NaN)
data=data.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',
                         'listed_in(city)':'city'})

# Convert str to float

X=data.copy()
X.online_order=X.online_order.apply(lambda x: '1' if str(x)=='Yes' else '0')
X.book_table=X.book_table.apply(lambda x: '1' if str(x)=='Yes' else '0')

X.rate=X.rate.astype(str)
X.rate=X.rate.apply(lambda x : x.replace('/5',''))
X.rate=X.rate.astype(float)

X.cost=X.cost.astype(str)
X.cost=X.cost.apply(lambda y : y.replace(',',''))
X.cost=X.cost.astype(float)

X.online_order=X.online_order.astype(float)
X.book_table=X.book_table.astype(float)
X.votes=X.votes.astype(float)
X

# Now all value related columns are float type.

# Replace missing values by deleting missing values
X_del=X.copy()
X_del.dropna(how='any',inplace=True)

# Remove duplicates
X_del.drop_duplicates(keep='first',inplace=True)
X_del

#Box plot for cost
plt.boxplot(x=X_del.cost)
plt.show()

#Box plot for Rate
plt.boxplot(x=X_del.rate)
plt.show()

# PIE CHART
# Understanding persentage of people from each location

import random
se=set()
d=dict()
for i in X_del.city:
  if i not in se:
    se.add(i)
    d.update({i:1})
    # print(d)
  else:
    d[i]+=1

# print(d)

labels = d.keys()

sizes = d.values()
colors=[]

for x in labels:
    rgb = (random.random(), random.random(), random.random())
    colors.append(rgb)

# explode = (0.1, 0, 0, 0)  # explode 1st slice

plt.pie(sizes, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
# plt.legend(labels, loc="best")
plt.title("Understanding percentage of people from each location\n\n")
plt.axis('equal')
plt.show()

# PIE CHART
# Understanding persentage of people from each type of delivery

import random
se=set()
d=dict()
for i in X_del.online_order:
  if i not in se:
    se.add(i)
    d.update({i:1})
    # print(d)
  else:
    d[i]+=1

# print(d)

labels = d.keys()

sizes = d.values()
colors=[]

for x in labels:
    rgb = (random.random(), random.random(), random.random())
    colors.append(rgb)

# explode = (0.1, 0, 0, 0)  # explode 1st slice

plt.pie(sizes, labels=labels, colors=colors,
autopct='%1.1f%%', shadow=True, startangle=140)
# plt.legend(labels, loc="best")
plt.title("Understanding the type category from each location")
plt.axis('equal')
plt.show()

# # #BAR CHART
# # #average cost vs city
se=set()
d=dict()
for i in X_del.city:
  if i not in se:
    se.add(i)
    d.update({i:1})
    # print(d)
  else:
    d[i]+=1
d_cost=dict()
for i in se:
  d_cost.update({i:0})

#summing all the terms
for i in X_del.index:
    d_cost[X_del.city[i]]+=X_del.cost[i]


#Getting the average of all the terms
for i in se:
  d_cost[i]=d_cost[i]/d[i]

# fig = plt.figure()
# ax = fig.add_axes([0,0,1,1])
# langs = d.keys()
# bars = d_cost.values()
# ax.bar(langs,bars,width=0.5)
# plt.xticks(rotation=90)
# plt.title("Average cost vs Location")
# plt.xlabel('Location')
# plt.show()
print(len(d.keys()))
plt.title("Average cost vs Location")
plt.ylabel('Average cost')
plt.bar(d.keys(),height=d_cost.values())
plt.xticks(rotation=90)
plt.show()


#SCATTER PLOT
# Votes vs Cost
x = X_del.cost
y = X_del.votes

#ax=sns.regplot(x,y,x_jitter=5,color='purple',label="Votes vs Cost",)
#ax.set_title("Votes vs Cost")
plt.title('Scatter plot for cost vs votes')
plt.scatter(x,y)
plt.show()
#fit reg line show the general trend

#Histogram for cost
x = X_del.cost
plt.title('Histogram plot for cost')
plt.hist(x,bins=50)
plt.show()

print(np.corrcoef(X_del.rate,X_del.votes))

